import { Component, Injector } from '@angular/core';
import { FLOW_CONFIG } from '../../flow-config';
import { FlowStateService } from '../../flow-state.service';
import {
  BusinessTypeQuestionComponent,
  LlcOwnershipComponent,
  LlcNextStepComponent,
  SolePropOwnershipComponent,
  SolePropNextStepComponent,
  RejectScreenComponent
} from '../../steps'; // Export index barrel from steps folder

@Component({
  selector: 'app-decision-flow',
  templateUrl: './decision-flow.component.html',
  styleUrls: ['./decision-flow.component.scss']
})
export class DecisionFlowComponent {
  customerType!: 'soleProp' | 'llc';
  currentStepKey!: string;
  currentComponent: any;
  currentInjector: Injector;
  flowStack: string[] = [];

  constructor(private injector: Injector, private stateService: FlowStateService) {}

  ngOnInit() {
    const navState = history.state;
    this.customerType = navState.customerType || 'soleProp';
    this.startFlow();
  }

  startFlow() {
    const flow = FLOW_CONFIG.entry;
    this.currentStepKey = flow.start;
    this.flowStack = [];
    this.stateService.clear();
    this.loadStep(flow.steps[this.currentStepKey]);
  }

  loadStep(stepConfig: any) {
    const component = this.resolveComponent(stepConfig.component);
    const savedData = this.stateService.getStepData(this.currentStepKey);

    this.currentComponent = component;
    this.currentInjector = Injector.create({
      providers: [
        { provide: 'onContinue', useValue: (data: any) => this.goNext(data) },
        { provide: 'onBack', useValue: () => this.goBack() },
        { provide: 'customerType', useValue: this.customerType },
        { provide: 'savedData', useValue: savedData }
      ],
      parent: this.injector
    });
  }

  goNext(formData: any) {
    const flow = FLOW_CONFIG.entry;
    const currentStep = flow.steps[this.currentStepKey];
    this.stateService.setStepData(this.currentStepKey, formData);

    const nextKey =
      typeof currentStep.next === 'function' ? currentStep.next(formData) : currentStep.next;
    if (!nextKey) return;

    this.flowStack.push(this.currentStepKey);
    this.currentStepKey = nextKey;
    this.loadStep(flow.steps[nextKey]);
  }

  goBack() {
    if (this.flowStack.length === 0) return;
    this.currentStepKey = this.flowStack.pop()!;
    const flow = FLOW_CONFIG.entry;
    this.loadStep(flow.steps[this.currentStepKey]);
  }

  get canGoBack() {
    return this.flowStack.length > 0;
  }

  resolveComponent(name: string) {
    const map = {
      BusinessTypeQuestionComponent,
      LlcOwnershipComponent,
      LlcNextStepComponent,
      SolePropOwnershipComponent,
      SolePropNextStepComponent,
      RejectScreenComponent
    };
    return map[name];
  }
}

<div class="flow-container">
  <ng-container *ngIf="currentComponent">
    <ng-container *ngComponentOutlet="currentComponent; injector: currentInjector"></ng-container>
  </ng-container>

  <div *ngIf="canGoBack" class="back-btn">
    <button mat-stroked-button color="primary" (click)="goBack()">‚Üê Back</button>
  </div>
</div>
